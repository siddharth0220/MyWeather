{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kumar\\\\Downloads\\\\weatherApp-Reactjs-master\\\\weatherApp-Reactjs-master\\\\src\\\\currentLocation.js\";\nimport React from \"react\";\nimport apiKeys from \"./apiKeys\";\nimport Clock from \"react-live-clock\";\nimport Forcast from \"./forcast\";\nimport loader from \"./images/WeatherIcons.gif\";\nimport ReactAnimatedWeather from \"react-animated-weather\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst dateBuilder = d => {\n  let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n  let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n  let day = days[d.getDay()];\n  let date = d.getDate();\n  let month = months[d.getMonth()];\n  let year = d.getFullYear();\n  return `${day}, ${date} ${month} ${year}`;\n};\nconst defaults = {\n  color: \"white\",\n  size: 112,\n  animate: true\n};\nclass Weather extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      lat: undefined,\n      lon: undefined,\n      errorMessage: undefined,\n      temperatureC: undefined,\n      temperatureF: undefined,\n      city: undefined,\n      country: undefined,\n      humidity: undefined,\n      description: undefined,\n      icon: \"CLEAR_DAY\",\n      sunrise: undefined,\n      sunset: undefined,\n      errorMsg: undefined // Changed from errorMsg to errorMsg\n    };\n    this.getPosition = options => {\n      return new Promise(function (resolve, reject) {\n        navigator.geolocation.getCurrentPosition(resolve, reject, options);\n      });\n    };\n    this.getWeather = async (lat, lon) => {\n      // Prevent fetching if lat/lon are not set (e.g., on first timer tick)\n      if (!lat || !lon) {\n        return;\n      }\n      const api_call = await fetch(`${apiKeys.base}weather?lat=${lat}&lon=${lon}&units=metric&APPID=${apiKeys.key}`);\n      const data = await api_call.json();\n\n      // **THIS IS THE FIX**\n      // Check if data.main exists. If not, it's an error.\n      console.log;\n      if (data.main) {\n        this.setState({\n          lat: lat,\n          lon: lon,\n          city: data.name,\n          temperatureC: Math.round(data.main.temp),\n          temperatureF: Math.round(data.main.temp * 1.8 + 32),\n          humidity: data.main.humidity,\n          main: data.weather[0].main,\n          country: data.sys.country,\n          errorMsg: undefined // Clear any previous errors\n        });\n\n        // Also fix the switch statement to read from 'data' directly\n        switch (data.weather[0].main) {\n          case \"Haze\":\n            this.setState({\n              icon: \"CLEAR_DAY\"\n            });\n            break;\n          case \"Clouds\":\n            this.setState({\n              icon: \"CLOUDY\"\n            });\n            break;\n          case \"Rain\":\n            this.setState({\n              icon: \"RAIN\"\n            });\n            break;\n          case \"Snow\":\n            this.setState({\n              icon: \"SNOW\"\n            });\n            break;\n          case \"Dust\":\n            this.setState({\n              icon: \"WIND\"\n            });\n            break;\n          case \"Drizzle\":\n            this.setState({\n              icon: \"SLEET\"\n            });\n            break;\n          case \"Fog\":\n            this.setState({\n              icon: \"FOG\"\n            });\n            break;\n          case \"Smoke\":\n            this.setState({\n              icon: \"FOG\"\n            });\n            break;\n          case \"Tornado\":\n            this.setState({\n              icon: \"WIND\"\n            });\n            break;\n          default:\n            this.setState({\n              icon: \"CLEAR_DAY\"\n            });\n        }\n      } else {\n        // If data.main is undefined, log the error and set an error message\n        console.error(\"API Error:\", data.message);\n        this.setState({\n          errorMsg: data.message || \"City not found\",\n          temperatureC: undefined // Clear temp to stop showing weather\n        });\n      }\n    };\n  }\n  componentDidMount() {\n    if (navigator.geolocation) {\n      this.getPosition().then(position => {\n        this.getWeather(position.coords.latitude, position.coords.longitude);\n      }).catch(err => {\n        // Fallback location\n        this.getWeather(28.67, 77.22);\n        alert(\"You have disabled location service. Allow 'This APP' to access your location. Your current location will be used for calculating Real time weather.\");\n      });\n    } else {\n      alert(\"Geolocation not available\");\n    }\n    this.timerID = setInterval(() => this.getWeather(this.state.lat, this.state.lon), 600000);\n  }\n  componentWillUnmount() {\n    clearInterval(this.timerID);\n  }\n  render() {\n    // Show an error message if one exists\n    if (this.state.errorMsg) {\n      return /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          style: {\n            color: \"red\",\n            fontSize: \"22px\",\n            fontWeight: \"600\"\n          },\n          children: [\"Error: \", this.state.errorMsg]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          style: {\n            color: \"white\",\n            marginTop: \"10px\"\n          },\n          children: \"This may be due to an invalid API key, network issue, or invalid location.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 9\n      }, this);\n    }\n    // Show weather data if temperature is loaded\n    else if (this.state.temperatureC) {\n      return /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"city\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"title\",\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              children: this.state.city\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 187,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n              children: this.state.country\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 188,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mb-icon\",\n            children: [\" \", /*#__PURE__*/_jsxDEV(ReactAnimatedWeather, {\n              icon: this.state.icon,\n              color: defaults.color,\n              size: defaults.size,\n              animate: defaults.animate\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 192,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: this.state.main\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 198,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 190,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"date-time\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"dmy\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                id: \"txt\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 202,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"current-time\",\n                children: /*#__PURE__*/_jsxDEV(Clock, {\n                  format: \"HH:mm:ss\",\n                  interval: 1000,\n                  ticking: true\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 204,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 203,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"current-date\",\n                children: dateBuilder(new Date())\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 206,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 201,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"temperature\",\n              children: /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [this.state.temperatureC, \"\\xB0\", /*#__PURE__*/_jsxDEV(\"span\", {\n                  children: \"C\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 210,\n                  columnNumber: 45\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 209,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 208,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 200,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Forcast, {\n          icon: this.state.icon,\n          weather: this.state.main\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 9\n      }, this);\n    }\n    // Otherwise, show the loader\n    else {\n      return /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: loader,\n          style: {\n            width: \"50%\",\n            WebkitUserDrag: \"none\"\n          },\n          alt: \"Loading\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          style: {\n            color: \"white\",\n            fontSize: \"22px\",\n            fontWeight: \"600\"\n          },\n          children: \"Detecting your location\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          style: {\n            color: \"white\",\n            marginTop: \"10px\"\n          },\n          children: [\"Your current location will be displayed on the App \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 230,\n            columnNumber: 64\n          }, this), \" & used for calculating Real time weather.\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 9\n      }, this);\n    }\n  }\n}\nexport default Weather;","map":{"version":3,"names":["React","apiKeys","Clock","Forcast","loader","ReactAnimatedWeather","jsxDEV","_jsxDEV","dateBuilder","d","months","days","day","getDay","date","getDate","month","getMonth","year","getFullYear","defaults","color","size","animate","Weather","Component","constructor","args","state","lat","undefined","lon","errorMessage","temperatureC","temperatureF","city","country","humidity","description","icon","sunrise","sunset","errorMsg","getPosition","options","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","getWeather","api_call","fetch","base","key","data","json","console","log","main","setState","name","Math","round","temp","weather","sys","error","message","componentDidMount","then","position","coords","latitude","longitude","catch","err","alert","timerID","setInterval","componentWillUnmount","clearInterval","render","Fragment","children","style","fontSize","fontWeight","fileName","_jsxFileName","lineNumber","columnNumber","marginTop","className","id","format","interval","ticking","Date","src","width","WebkitUserDrag","alt"],"sources":["C:/Users/kumar/Downloads/weatherApp-Reactjs-master/weatherApp-Reactjs-master/src/currentLocation.js"],"sourcesContent":["import React from \"react\";\nimport apiKeys from \"./apiKeys\";\nimport Clock from \"react-live-clock\";\nimport Forcast from \"./forcast\";\nimport loader from \"./images/WeatherIcons.gif\";\nimport ReactAnimatedWeather from \"react-animated-weather\";\n\nconst dateBuilder = (d) => {\n  let months = [\n    \"January\",\n    \"February\",\n    \"March\",\n    \"April\",\n    \"May\",\n    \"June\",\n    \"July\",\n    \"August\",\n    \"September\",\n    \"October\",\n    \"November\",\n    \"December\",\n  ];\n  let days = [\n    \"Sunday\",\n    \"Monday\",\n    \"Tuesday\",\n    \"Wednesday\",\n    \"Thursday\",\n    \"Friday\",\n    \"Saturday\",\n  ];\n\n  let day = days[d.getDay()];\n  let date = d.getDate();\n  let month = months[d.getMonth()];\n  let year = d.getFullYear();\n\n  return `${day}, ${date} ${month} ${year}`;\n};\n\nconst defaults = {\n  color: \"white\",\n  size: 112,\n  animate: true,\n};\n\nclass Weather extends React.Component {\n  state = {\n    lat: undefined,\n    lon: undefined,\n    errorMessage: undefined,\n    temperatureC: undefined,\n    temperatureF: undefined,\n    city: undefined,\n    country: undefined,\n    humidity: undefined,\n    description: undefined,\n    icon: \"CLEAR_DAY\",\n    sunrise: undefined,\n    sunset: undefined,\n    errorMsg: undefined, // Changed from errorMsg to errorMsg\n  };\n\n  componentDidMount() {\n    if (navigator.geolocation) {\n      this.getPosition()\n        .then((position) => {\n          this.getWeather(position.coords.latitude, position.coords.longitude);\n        })\n        .catch((err) => {\n          // Fallback location\n          this.getWeather(28.67, 77.22);\n          alert(\n            \"You have disabled location service. Allow 'This APP' to access your location. Your current location will be used for calculating Real time weather.\"\n          );\n        });\n    } else {\n      alert(\"Geolocation not available\");\n    }\n\n    this.timerID = setInterval(\n      () => this.getWeather(this.state.lat, this.state.lon),\n      600000\n    );\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timerID);\n  }\n\n  getPosition = (options) => {\n    return new Promise(function (resolve, reject) {\n      navigator.geolocation.getCurrentPosition(resolve, reject, options);\n    });\n  };\n\n  getWeather = async (lat, lon) => {\n    // Prevent fetching if lat/lon are not set (e.g., on first timer tick)\n    if (!lat || !lon) {\n      return; \n    }\n\n    const api_call = await fetch(\n      `${apiKeys.base}weather?lat=${lat}&lon=${lon}&units=metric&APPID=${apiKeys.key}`\n    );\n    const data = await api_call.json();\n\n    // **THIS IS THE FIX**\n    // Check if data.main exists. If not, it's an error.\n    console.log\n    if (data.main) {\n      this.setState({\n        lat: lat,\n        lon: lon,\n        city: data.name,\n        temperatureC: Math.round(data.main.temp),\n        temperatureF: Math.round(data.main.temp * 1.8 + 32),\n        humidity: data.main.humidity,\n        main: data.weather[0].main,\n        country: data.sys.country,\n        errorMsg: undefined, // Clear any previous errors\n      });\n\n      // Also fix the switch statement to read from 'data' directly\n      switch (data.weather[0].main) {\n        case \"Haze\":\n          this.setState({ icon: \"CLEAR_DAY\" });\n          break;\n        case \"Clouds\":\n          this.setState({ icon: \"CLOUDY\" });\n          break;\n        case \"Rain\":\n          this.setState({ icon: \"RAIN\" });\n          break;\n        case \"Snow\":\n          this.setState({ icon: \"SNOW\" });\n          break;\n        case \"Dust\":\n          this.setState({ icon: \"WIND\" });\n          break;\n        case \"Drizzle\":\n          this.setState({ icon: \"SLEET\" });\n          break;\n        case \"Fog\":\n          this.setState({ icon: \"FOG\" });\n          break;\n        case \"Smoke\":\n          this.setState({ icon: \"FOG\" });\n          break;\n        case \"Tornado\":\n          this.setState({ icon: \"WIND\" });\n          break;\n        default:\n          this.setState({ icon: \"CLEAR_DAY\" });\n      }\n    } else {\n      // If data.main is undefined, log the error and set an error message\n      console.error(\"API Error:\", data.message);\n      this.setState({\n        errorMsg: data.message || \"City not found\",\n        temperatureC: undefined, // Clear temp to stop showing weather\n      });\n    }\n  };\n\n  render() {\n    // Show an error message if one exists\n    if (this.state.errorMsg) {\n      return (\n        <React.Fragment>\n          <h3 style={{ color: \"red\", fontSize: \"22px\", fontWeight: \"600\" }}>\n            Error: {this.state.errorMsg}\n          </h3>\n          <h4 style={{ color: \"white\", marginTop: \"10px\" }}>\n            This may be due to an invalid API key, network issue, or invalid\n            location.\n          </h4>\n        </React.Fragment>\n      );\n    }\n    // Show weather data if temperature is loaded\n    else if (this.state.temperatureC) {\n      return (\n        <React.Fragment>\n          <div className=\"city\">\n            <div className=\"title\">\n              <h2>{this.state.city}</h2>\n              <h3>{this.state.country}</h3>\n            </div>\n            <div className=\"mb-icon\">\n              {\" \"}\n              <ReactAnimatedWeather\n                icon={this.state.icon}\n                color={defaults.color}\n                size={defaults.size}\n                animate={defaults.animate}\n              />\n              <p>{this.state.main}</p>\n            </div>\n            <div className=\"date-time\">\n              <div className=\"dmy\">\n                <div id=\"txt\"></div>\n                <div className=\"current-time\">\n                  <Clock format=\"HH:mm:ss\" interval={1000} ticking={true} />\n                </div>\n                <div className=\"current-date\">{dateBuilder(new Date())}</div>\n              </div>\n              <div className=\"temperature\">\n                <p>\n                  {this.state.temperatureC}°<span>C</span>\n                </p>\n                {/* <span className=\"slash\">/</span>\n                {this.state.temperatureF} &deg;F */}\n              </div>\n            </div>\n          </div>\n          <Forcast icon={this.state.icon} weather={this.state.main} />\n        </React.Fragment>\n      );\n    }\n    // Otherwise, show the loader\n    else {\n      return (\n        <React.Fragment>\n          <img src={loader} style={{ width: \"50%\", WebkitUserDrag: \"none\" }} alt=\"Loading\" />\n          <h3 style={{ color: \"white\", fontSize: \"22px\", fontWeight: \"600\" }}>\n            Detecting your location\n          </h3>\n          <h3 style={{ color: \"white\", marginTop: \"10px\" }}>\n            Your current location will be displayed on the App <br></br> & used\n            for calculating Real time weather.\n          </h3>\n        </React.Fragment>\n      );\n    }\n  }\n}\n\nexport default Weather;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}